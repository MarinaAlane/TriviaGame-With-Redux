{"ast":null,"code":"var _jsxFileName = \"/home/marina/Documentos/Trivia/sd-010-a-project-trivia-react-redux/src/pages/GamePage.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\nimport Question from '../components/Question/Question';\nimport Loading from '../components/Loading';\nimport styles from './styles.module.css';\n\nclass GamePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      loading: true,\n      index: 0,\n      shouldRedirect: false\n    };\n    this.fetchApi = this.fetchApi.bind(this);\n    this.getNextQuestion = this.getNextQuestion.bind(this);\n    this.renderTimer = this.renderTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchApi();\n  }\n\n  getNextQuestion() {\n    const _this$state = this.state,\n          index = _this$state.index,\n          questions = _this$state.questions;\n\n    if (index < questions.length - 1) {\n      this.setState({\n        index: index + 1\n      });\n    }\n\n    if (index === questions.length - 1) {\n      this.setState({\n        shouldRedirect: true\n      });\n    }\n  }\n\n  async fetchApi() {\n    const getToken = localStorage.getItem('token');\n    const endpoint = `https://opentdb.com/api.php?amount=5&token=${getToken}`;\n\n    try {\n      const request = await fetch(endpoint);\n      const data = await request.json();\n      console.log(data);\n      const trivia = data.results;\n      this.setState({\n        loading: false,\n        questions: trivia\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  renderTimer() {\n    const time = this.state.time;\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, time);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          loading = _this$state2.loading,\n          index = _this$state2.index,\n          questions = _this$state2.questions,\n          shouldRedirect = _this$state2.shouldRedirect;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    }\n\n    if (shouldRedirect) {\n      return React.createElement(Redirect, {\n        to: \"/feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.gamePageContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Question, {\n      quiz: questions[index],\n      getNextQuestion: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(null)(GamePage); // Referências:\n// função shuffleArr adaptada de: https://stackoverflow.com/questions/56501078/randomizing-quiz-answers-fetched-from-a-rest-api\n// sobre splice: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n// função getNextQuestion adaptada de: https://www.freecodecamp.org/news/how-to-build-a-quiz-app-using-react/","map":{"version":3,"sources":["/home/marina/Documentos/Trivia/sd-010-a-project-trivia-react-redux/src/pages/GamePage.js"],"names":["React","Redirect","connect","Header","Question","Loading","styles","GamePage","Component","constructor","props","state","questions","loading","index","shouldRedirect","fetchApi","bind","getNextQuestion","renderTimer","componentDidMount","length","setState","getToken","localStorage","getItem","endpoint","request","fetch","data","json","console","log","trivia","results","error","time","render","gamePageContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\nimport Question from '../components/Question/Question';\nimport Loading from '../components/Loading';\nimport styles from './styles.module.css';\n\nclass GamePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      loading: true,\n      index: 0,\n      shouldRedirect: false,\n    };\n\n    this.fetchApi = this.fetchApi.bind(this);\n    this.getNextQuestion = this.getNextQuestion.bind(this);\n    this.renderTimer = this.renderTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchApi();\n  }\n\n  getNextQuestion() {\n    const { index, questions } = this.state;\n    if (index < questions.length - 1) {\n      this.setState({ index: index + 1 });\n    }\n    if (index === questions.length - 1) {\n      this.setState({ shouldRedirect: true });\n    }\n  }\n\n  async fetchApi() {\n    const getToken = localStorage.getItem('token');\n    const endpoint = `https://opentdb.com/api.php?amount=5&token=${getToken}`;\n    try {\n      const request = await fetch(endpoint);\n      const data = await request.json();\n      console.log(data);\n      const trivia = data.results;\n      this.setState({\n        loading: false,\n        questions: trivia,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  renderTimer() {\n    const { time } = this.state;\n    return (<span>{ time }</span>);\n  }\n\n  render() {\n    const { loading, index, questions, shouldRedirect } = this.state;\n\n    if (loading) {\n      return <Loading />;\n    }\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/feedback\" />;\n    }\n\n    return (\n      <div className={ styles.gamePageContent }>\n        <Header />\n        <div>\n          <Question quiz={ questions[index] } getNextQuestion={ this.getNextQuestion } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null)(GamePage);\n\n// Referências:\n// função shuffleArr adaptada de: https://stackoverflow.com/questions/56501078/randomizing-quiz-answers-fetched-from-a-rest-api\n// sobre splice: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n// função getNextQuestion adaptada de: https://www.freecodecamp.org/news/how-to-build-a-quiz-app-using-react/\n"]},"metadata":{},"sourceType":"module"}